Questions/issues related to hilbert_space_tools
===============================================

* Map-based states must survive!

    space_partition (autopartition algorithm) becomes VERY slow for bigger Hilbert spaces, if the vector-based states are used.

* Boost.Serialization/Boost.MPI support for the states.

    Something has to be done about the HilbertSpace pointer stored in a state. It cannot be serialized.
    Replace the pointer with a mere index? Then imperative_operator would also need a redesign (make sub_spaces_set argument of the constructor mandatory?)

* Different scalar types for an imperative_operator and a state it is acting on (draft prepared).

    Example: complex state + real-valued Hamiltonian.

* Projection of a state onto a given space (draft prepared).

    Example: for a state from hilbert_space, extract a part belonging to a sub_hilbert_space.

* Construct fundamental_operator_set out of std::set (draft prepared).

    Basically for convenience.

* hilbert_space/sub_hilbert_space(/fundamental_operator_set ?): get a Fock state from a set of indices (draft prepared).

    set(i,j,k,...) => |psi> = c^+_i c^+_j c^+_k ... |0>

* imperative_operator: new application semantics for the operators depending on parameters.

    At the moment one applies an imperative_operator to a state in this way:

    auto psi = op(phi);

    There is a (poor) draft of an extended application syntax:

    auto psi = op(phi,x,y,z,...);

    The additional arguments x,y,z,... are forwarded to the coefficients of the operator. In other words, we apply
    an operator obtained from op by replacing its monomial coefficients with values returned by coeff(x,y,z,...).
    This feature makes sense only for scalar_t being a callable object.

    Technical issue: the present implementation is messy due to GCC bug 41933 (g++ 4.8.x does not like variadic capture lists of lambdas). 

Long-term plans
===============

* Mixed fermionic/bosonic algebra in many_body_operator.

* Mixed fermionic/bosonic states and imperative operators.