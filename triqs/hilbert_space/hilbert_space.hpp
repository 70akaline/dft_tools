/*******************************************************************************
 *
 * TRIQS: a Toolbox for Research in Interacting Quantum Systems
 *
 * Copyright (C) 2013, P. Seth, I. Krivenko, M. Ferrero and O. Parcollet
 *
 * TRIQS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * TRIQS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * TRIQS. If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/
#pragma once

#include <set>
#include <triqs/utility/exceptions.hpp>
#include <triqs/h5/vector.hpp>
#include "fundamental_operator_set.hpp"
#include <boost/container/flat_map.hpp>

namespace triqs {
namespace hilbert_space {

using fock_state_t = uint64_t; // The coding of the Fock state : 64 bits word in binary

/* ---------------------------------------------------------------------------------------------------
 * A *full* Hilbert space spanned from all Fock states generated by a given set of fundamental operators
 * --------------------------------------------------------------------------------------------------  */
class hilbert_space {
 int dim; // the dimension

 public:
 hilbert_space() : dim(0) {}

 // construct for a given basis
 hilbert_space(fundamental_operator_set const &fops) : dim(1ull << fops.size()) {}

 // size of the hilbert space
 int size() const { return dim; }

 // compare two hilbert spaces
 bool operator==(hilbert_space const& hs) const { return dim == hs.dim; }
 bool operator!=(hilbert_space const& hs) const { return !operator==(hs); }

 // Check if a given fock state belong to this space
 bool has_state(fock_state_t f) const { return f < dim; }

 // find the index of a given fock state
 int get_state_index(fock_state_t f) const {
  if (f >= dim) TRIQS_RUNTIME_ERROR << "this index is too big";
  return f;
 }

 // return the i^th basis element as a fock state
 fock_state_t get_fock_state(int i) const {
  if (i >= dim) TRIQS_RUNTIME_ERROR << "this fock state doesn't exist (index too big)";
  return i;
 }

 // return the basis element generated by creation operators with given indices
 fock_state_t get_fock_state(fundamental_operator_set const &fops, std::set<fundamental_operator_set::indices_t> const& indices) const {
  fock_state_t f = 0;
  for(auto const& index : indices) f += 1 << fops[index];
  return f;
 }

 // HDF5
 friend std::string get_triqs_hdf5_data_scheme(hilbert_space const&) { return "hilbert_space"; }

 friend void h5_write(h5::group fg, std::string const& name, hilbert_space const& hs) {
  auto gr = fg.create_group(name);
  h5_write(gr, "dim", hs.dim);
 }

 friend void h5_read(h5::group fg, std::string const& name, hilbert_space & hs) {
  auto gr = fg.open_group(name);
  h5_read(gr, "dim", hs.dim);
 }

};


/* ---------------------------------------------------------------------------------------------------
 * a subhilbert space, as a set of basis Fock states.
 * --------------------------------------------------------------------------------------------------  */
// contains 2 functions to switch from the Fock state to its number in this set
class sub_hilbert_space {

 public:
 sub_hilbert_space(int index = -1) : index(index) {}

 // add a fock state to the hilbert space basis
 void add_fock_state(fock_state_t f) {
  int ind = fock_states.size();
  fock_states.push_back(f);
  fock_to_index.insert(std::make_pair(f, ind));
 }

 // dimension
 int size() const { return fock_states.size(); }

 // compare two hilbert spaces
 bool operator==(sub_hilbert_space const& hs) const {
  return index == hs.index && fock_states == hs.fock_states;
 }
 bool operator!=(sub_hilbert_space const& hs) const { return !operator==(hs); }

 // find the index of a given state
 int get_state_index(fock_state_t f) const { return fock_to_index.find(f)->second; }

 // Check if a given fock state belong to this space
 bool has_state(fock_state_t f) const { return fock_to_index.count(f) == 1; }

 // the state for a given index
 fock_state_t get_fock_state(int i) const { return fock_states[i]; }

  // the state for a given index
 std::vector<fock_state_t> const & get_all_fock_states() const { return fock_states; }

 // The subhilbert has a (block) index
 int get_index() const {
  return index;
 };

 void set_index(int i) { index = i; }

 private:
 int index;

 // the list of all fock states
 std::vector<fock_state_t> fock_states;

 // reverse map to quickly find the index of a state
 // the boost flat_map is implemented as an ordered vector,
 // hence is it slow to insert (we don't care) but fast to look up (we do it a lot)
 // std::map<fock_state_t, int> fock_to_index;
 boost::container::flat_map<fock_state_t, int> fock_to_index;

 // HDF5
 friend std::string get_triqs_hdf5_data_scheme(sub_hilbert_space const&) { return "sub_hilbert_space"; }

 friend void h5_write(h5::group fg, std::string const& name, sub_hilbert_space const& hs) {
  auto gr = fg.create_group(name);
  h5_write(gr, "index", hs.index);
  h5_write(gr, "fock_states", hs.fock_states);
 }

 friend void h5_read(h5::group fg, std::string const& name, sub_hilbert_space & hs) {
  using h5::h5_read;
  auto gr = fg.open_group(name);
  h5_read(gr, "index", hs.index);
  h5_read(gr, "fock_states", hs.fock_states);
  hs.fock_to_index.clear();
  for(auto f : hs.fock_states)
   hs.fock_to_index.insert(std::make_pair(f, static_cast<int>(hs.fock_to_index.size())));
 }

};
}}
